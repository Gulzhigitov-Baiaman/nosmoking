import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { useNavigate, useSearchParams } from "react-router-dom";
import { ArrowLeft, Check, Crown, Sparkles, Settings, RefreshCw } from "lucide-react";
import { useTranslation } from "react-i18next";
import { usePremium } from "@/hooks/usePremium";
import { useSubscription } from "@/hooks/useSubscription";

const STRIPE_PRICE_ID = "price_1SIT3YLJqhOyuCVBc6bCV5Vo"; // Recurring monthly subscription

const Premium = () => {
  const { user } = useAuth();
  const { isPremium } = usePremium();
  const { refresh: refreshSubscription } = useSubscription();
  const { toast } = useToast();
  const navigate = useNavigate();
  const { t } = useTranslation();
  const [loading, setLoading] = useState(false);
  const [syncing, setSyncing] = useState(false);
  const [searchParams] = useSearchParams();

  // Check if user returned from payment
  useEffect(() => {
    const paymentCompleted = searchParams.get('payment');
    if (paymentCompleted === 'processing') {
      toast({
        title: "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞",
        description: "–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. Premium –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
        duration: 6000,
      });
      // Auto-sync after a delay
      setTimeout(() => {
        handleSyncSubscription();
      }, 3000);
    }
  }, [searchParams]);

  const handleStripeCheckout = async () => {
    if (!user) {
      toast({
        title: t('premium.subscribe'),
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç",
        variant: "destructive",
      });
      navigate("/auth");
      return;
    }

    setLoading(true);
    try {
      const { data, error } = await supabase.functions.invoke("create-checkout", {
        body: { priceId: STRIPE_PRICE_ID },
      });

      if (error) {
        console.error("Checkout error:", error);
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–µ—Å—Å–∏—é",
          variant: "destructive",
        });
        return;
      }
      
      if (data?.url) {
        // Open Stripe checkout in new tab
        window.open(data.url, '_blank');
        toast({
          title: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∞",
          description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–π—Å—è –≤–∫–ª–∞–¥–∫–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞.",
          duration: 5000,
        });
      } else {
        throw new Error("No checkout URL received");
      }
    } catch (error) {
      console.error("Error creating Stripe checkout:", error);
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
        description: "–ï—Å–ª–∏ –¥–µ–Ω—å–≥–∏ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã, –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleManageSubscription = async () => {
    setLoading(true);
    try {
      const { data, error } = await supabase.functions.invoke("customer-portal");
      
      if (error) {
        console.error("Portal error:", error);
        toast({
          title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–∞–ª–∞",
          description: "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Stripe Customer Portal. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.",
          variant: "destructive",
          duration: 8000,
        });
        return;
      }
      
      if (data?.url) {
        window.open(data.url, '_blank');
        toast({
          title: "–ü–æ—Ä—Ç–∞–ª –æ—Ç–∫—Ä—ã—Ç",
          description: "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–π—Å—è –≤–∫–ª–∞–¥–∫–µ",
          duration: 5000,
        });
      } else {
        throw new Error("No portal URL received");
      }
    } catch (error: any) {
      console.error("Error opening customer portal:", error);
      toast({
        title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
        description: "–ü–æ—Ä—Ç–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
        variant: "destructive",
        duration: 8000,
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSyncSubscription = async () => {
    setSyncing(true);
    console.log("[Premium] Syncing subscription status...");
    try {
      await refreshSubscription();
      console.log("[Premium] Subscription synced successfully");
      toast({
        title: "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        description: "–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω. –ï—Å–ª–∏ –≤—ã –Ω–µ–¥–∞–≤–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ Premium, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω.",
        duration: 5000,
      });
    } catch (error) {
      console.error("[Premium] Sync error:", error);
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
        variant: "destructive",
      });
    } finally {
      setSyncing(false);
    }
  };

  const features = [
    { icon: "üìÖ", text: t('premium.features.calendar') },
    { icon: "üí¨", text: t('premium.features.chat') },
    { icon: "üë•", text: t('premium.features.friends') },
    { icon: "üìä", text: t('premium.features.reductionPlan') },
    { icon: "ü§ñ", text: t('premium.features.aiPlan') },
    { icon: "üìÑ", text: t('premium.features.pdfReports') },
    { icon: "üèÜ", text: t('premium.features.challenges') },
    { icon: "‚≠ê", text: t('premium.features.support') },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-secondary/20 p-4">
      <div className="max-w-5xl mx-auto pt-8">
        <Button variant="ghost" onClick={() => navigate("/dashboard")} className="mb-6">
          <ArrowLeft className="w-4 h-4 mr-2" />
          {t('nav.back')}
        </Button>

        <div className="text-center mb-12">
          <div className="flex items-center justify-center gap-3 mb-4">
            <Crown className="w-12 h-12 text-primary" />
            <h1 className="text-4xl font-bold">{t('premium.title')}</h1>
          </div>
          <p className="text-xl text-muted-foreground">{t('premium.subtitle')}</p>
        </div>

        <div className="grid md:grid-cols-2 gap-6 mb-12">
          <Card className="p-6">
            <h3 className="text-2xl font-bold mb-4">{t('premium.free')}</h3>
            <div className="space-y-3 mb-6">
              <div className="flex items-center gap-2">
                <Check className="w-5 h-5 text-green-500" />
                <span>Basic statistics</span>
              </div>
              <div className="flex items-center gap-2">
                <Check className="w-5 h-5 text-green-500" />
                <span>Limited exercises</span>
              </div>
              <div className="flex items-center gap-2">
                <Check className="w-5 h-5 text-green-500" />
                <span>Basic tips</span>
              </div>
            </div>
            <Button variant="outline" disabled className="w-full">Current Plan</Button>
          </Card>

          <Card className={`p-6 ${isPremium ? 'border-2 border-primary' : ''}`}>
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-2xl font-bold flex items-center gap-2">
                <Crown className="w-6 h-6 text-primary" />
                Premium
              </h3>
              {isPremium && (
                <span className="bg-primary text-primary-foreground px-3 py-1 rounded-full text-sm">
                  {t('premium.active')}
                </span>
              )}
            </div>
            
            <div className="mb-6">
              <div className="flex items-baseline gap-2 mb-2">
                <span className="text-4xl font-bold">‚Ç©9,990</span>
                <span className="text-muted-foreground">/ {t('premium.perMonth')}</span>
              </div>
              <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-3 mb-4">
                <p className="text-sm font-semibold text-green-600 dark:text-green-400">
                  üéÅ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                </p>
                <p className="text-xs text-muted-foreground mt-1">
                  –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. –î–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
                </p>
              </div>
            </div>

            <div className="space-y-2 mb-6">
              {features.map((feature, idx) => (
                <div key={idx} className="flex items-center gap-2">
                  <span className="text-lg">{feature.icon}</span>
                  <span className="text-sm">{feature.text}</span>
                </div>
              ))}
            </div>

            {!isPremium ? (
              <Button 
                onClick={handleStripeCheckout}
                disabled={loading}
                className="w-full"
              >
                <Sparkles className="w-4 h-4 mr-2" />
                {loading ? "Loading..." : t('premium.subscribe')}
              </Button>
            ) : (
              <div className="flex gap-2">
                <Button 
                  onClick={handleManageSubscription}
                  variant="outline"
                  className="flex-1"
                  disabled={loading}
                >
                  <Settings className="w-4 h-4 mr-2" />
                  {loading ? "Loading..." : t('premium.manageSubscription')}
                </Button>
                <Button 
                  onClick={handleSyncSubscription}
                  variant="outline"
                  disabled={syncing}
                  className="flex-1"
                >
                  <RefreshCw className={`w-4 h-4 mr-2 ${syncing ? 'animate-spin' : ''}`} />
                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                </Button>
              </div>
            )}
          </Card>
        </div>

        <Card className="p-8 bg-gradient-to-br from-primary/10 to-primary/5">
          <h2 className="text-2xl font-bold mb-6 text-center">{t('premium.benefits.title')}</h2>
          <div className="grid md:grid-cols-2 gap-6">
            {features.map((feature, idx) => (
              <div key={idx} className="flex items-start gap-3">
                <span className="text-2xl">{feature.icon}</span>
                <div>
                  <p className="font-semibold">{feature.text}</p>
                </div>
              </div>
            ))}
          </div>
        </Card>
      </div>
    </div>
  );
};

export default Premium;
